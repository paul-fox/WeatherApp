@model IEnumerable<WeatherApp.Models.WeatherViewModel>

@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <style>
        #weather-container {
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
    </style>
}

<div class="container py-5">
    <h1 class="text-center mb-5 display-4 fw-bold">Weather Dashboard</h1>

    <!-- Search Form -->
    <form asp-action="SearchLocation" asp-controller="Home" method="post" class="mb-4">
        <div class="input-group w-50 mx-auto">
            <input type="text" class="form-control shadow-sm" name="query" placeholder="Enter a city or location" required />
            <button type="submit" class="btn btn-primary shadow-sm">Search</button>
        </div>
    </form>

    <!-- Update All Button -->
    <div class="text-center mb-4">
        <button type="submit" id="update-all-btn" class="btn btn-outline-primary px-4 py-2 rounded-pill shadow-sm">
            Update All
        </button>
    </div>

    <!-- Search Error -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger text-center shadow-sm">
            @TempData["ErrorMessage"]
        </div>
    }

    <h2 class="text-center mb-4 fw-semibold">Weather Forecast History</h2>

    <!-- Update Timestamp -->
    <div class="text-end text-muted small" id="last-updated">
        Last updated: never
    </div>

    <!-- Weather Table -->
    <div id="weather-container">
        @await Html.PartialAsync("_WeatherTable", Model)
    </div>

    <!-- Loading -->
    <div id="loading-spinner" class="text-center my-3" style="display:none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

   
</div>

@section Scripts {
    <script>
        async function refreshWeather() {
            document.getElementById('loading-spinner').style.display = 'block';
            
            const container = document.getElementById('weather-container');
            container.style.opacity = 0;
            
            try {
                const response = await fetch('/Home/WeatherTablePartial');
                const html = await response.text();
                container.innerHTML = html;
                
                setTimeout(() => container.style.opacity = 1, 50);

                document.getElementById('last-updated').innerText =
                    "Last updated: " + new Date().toLocaleTimeString();
            } catch (err) {
                console.error("Weather update failed", err);
                container.style.opacity = 1;
            } finally {
                document.getElementById('loading-spinner').style.display = 'none';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            refreshWeather(); // On page load
            setInterval(refreshWeather, 300000); // Every 5 minutes

            // Update All
            document.getElementById('update-all-btn').addEventListener('click', async (e) => {
                e.preventDefault(); // Prevent accidental fallback behavior
                document.getElementById('loading-spinner').style.display = 'block';

                try {
                    const updateUrl = '@Url.Action("UpdateAllWeather", "Home")';
                    const response = await fetch(updateUrl, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    if (response.ok) {
                        await refreshWeather();
                    } else {
                        console.error("Update failed with status", response.status);
                    }
                } catch (err) {
                    console.error("UpdateAllWeatherAsync call failed", err);
                } finally {
                    document.getElementById('loading-spinner').style.display = 'none';
                }
            });

            // Delete
            document.addEventListener('click', async (e) => {
                if (e.target.classList.contains('delete-btn')) {
                    const weatherId = e.target.dataset.id;
                    if (!confirm('Are you sure you want to delete this location?')) return;

                    try {
                        const deleteUrl = '@Url.Action("DeleteWeather", "Home")';
                        const response = await fetch(deleteUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                                    },
                            body: JSON.stringify({ weatherId: parseInt(weatherId) })
                        });

                        if (response.ok) {
                            await refreshWeather();
                        } else {
                            console.error("Delete failed with status", response.status);
                        }
                    } catch (err) {
                        console.error("DeleteWeatherAsync call failed", err);
                    }
                }
            });
        });
    </script>
}
